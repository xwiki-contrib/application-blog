<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="Blog.BlogScripts" locale="">
  <web>Blog</web>
  <name>BlogScripts</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1226272589000</creationDate>
  <parent>Blog.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1749827422000</date>
  <contentUpdateDate>1749827422000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>Blog.BlogScripts</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>fee8479f-4003-4fb8-837a-97642e3ff753</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>## includeMacros outputs a {pre}{/pre}, which normally is consumed by Radeox, but since the skin extensions are not
## rendered, this would remain in the source as invalid JavaScript code, which causes the whole extension to fail. The
## workaround is to wrap it in a comment, which will be discarded when minimizing the output.
/* #includeMacros("Blog.BlogParameters") */

if(typeof(XWiki) == 'undefined') {
  XWiki = new Object();
}
XWiki.Blog = {
  initialize : function() {
    var addCategoryButton = $("blog_AddCategoryButton");
    if (addCategoryButton) {
      Event.observe(addCategoryButton, "click", XWiki.Blog.createBlogCategory.bindAsEventListener(addCategoryButton.form));
    }
  },

  createBlogCategory : function() {
    var name = this.newCategoryName.value;
    var safeName = encodeURI(name.replace(/'/g, "").replace(/"/g, ""));
    var title = encodeURI(name);
    var parentCategory = this.newCategoryParent.value;
    var parentSpace = encodeURI(parentCategory.substring(0, parentCategory.indexOf(".")));
    var parent = encodeURI(parentCategory);
    new Ajax.Request("${xwiki.getURL('__name__', 'save', "ajax=1&amp;template=${blogCategoryTemplate}&amp;form_token=$!{services.csrf.getToken()}")}".replace(/__name__/g, safeName) + "&amp;parent=" + parent + "&amp;title=" + title + "&amp;${blogCategoryClassname}_0_name=" + title, {
      method: "get",
      onSuccess: XWiki.Blog.updateCategoryTree.bindAsEventListener(this, name, parentCategory, parentSpace),
      on1223: function(response) {response.request.options.onSuccess(response)},
      on409: function() {alert("$escapetool.javascript($services.localization.render('blog.manageCategories.js.add.error.409'))")},
      on403: function() {alert("$escapetool.javascript($services.localization.render('blog.manageCategories.js.add.error.403'))")},
      on401: function() {alert("$escapetool.javascript($services.localization.render('blog.manageCategories.js.add.error.401'))")},
      onFailure: function() {alert("$escapetool.javascript($services.localization.render('blog.manageCategories.js.add.failed'))")}
    });
  },

  updateCategoryTree : function(event, name, parentCategory, parentSpace) {
    var parentElement = $("blog_category_" + parentCategory);
    if (!parentElement) {
      parentElement = $("blog_category_container");
    } else {
      parentElement = parentElement.up();
    }
    var parentUl = parentElement.down("ul");
    if (!parentUl) {
      parentUl = document.createElement("ul");
      parentElement.appendChild(parentUl);
    }
    var children = parentUl.childElements();
    var found = false;
    var myId = "blog_category_" + parentSpace + "." + name;
    var li = document.createElement("li");
    var label = document.createElement("label");
    label.id = myId;
    li.appendChild(label);
    var checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.checked = "checked";
    checkbox.name = "${blogPostClassname}_0_category";
    checkbox.value = parentSpace + "." + name;
    label.appendChild(checkbox);
    label.appendChild(document.createTextNode(" " + name));
    var option = document.createElement("option");
    option.id = myId + "_option";
    option.value = parentSpace + "." + name;
    var depth = 0;
    var tmpParent = parentElement;
    while(tmpParent &amp;&amp; tmpParent != $("blog_category_container")) {
      depth++;
      tmpParent = tmpParent.up("li");
    }
    option.appendChild(document.createTextNode("&amp;nbsp;".unescapeHTML().times(2*depth) + name)); // TODO: Indent
    var selectBox = $("blog_category_selectBox");
    for (var i = 0; i &lt; children.size(); ++i) {
      if (children[i].down("label").id &gt; myId) {
        parentUl.insertBefore(li, children[i]);
        var optionSibling = $(children[i].down("label").id + "_option");
        selectBox.insertBefore(option, optionSibling);
        found = true;
        break;
      }
    }
    if (!found) {
      parentUl.appendChild(li);
      var tmpParent = parentElement;
      var optionAfter;
      while (!optionAfter &amp;&amp; tmpParent) {
        optionAfter = tmpParent.next("li");
        tmpParent = tmpParent.up("li")
      }
      if (optionAfter) {
        selectBox.insertBefore(option, $(optionAfter.down("label").id + "_option"));
      } else {
        selectBox.appendChild(option);
      }
    }
  }
}
document.observe("xwiki:dom:loaded", XWiki.Blog.initialize);</code>
    </property>
    <property>
      <name>Make the creation of categories asynchronous (legacy)</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Blog.BlogScripts</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>2ccd421d-ac3f-4e00-b524-2fa6e02ea061</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Make the show/hide buttons asynchronous.
 *
 * This code has been rewritten using jQuery and more modern technologies such as the Notification Widget or
 * the Icon Theme Application. The results is more in line with the modern XWiki look &amp; feel.
 */
require(['jquery'], function ($) {
  'use strict';
  
  /**
   * Initialization
   */
  $(document).ready(function() {
  
    /**
     * The different actions that the blog entries toolbars can handle
     */
    var actions = {
      'show': {
         'icon'       : "$escapetool.javascript($services.icon.renderHTML('unlock'))",
         'comment'    : "$escapetool.javascript($services.localization.render('blog.code.madevisible'))",
         'title'      : "$escapetool.javascript($services.localization.render('blog.code.makevisible'))",
         'hiddenValue': '1',
         'css'        : 'blog-tool-show'
       },
      'hide': {
        'icon'       : "$escapetool.javascript($services.icon.renderHTML('lock'))",
        'comment'    : "$escapetool.javascript($services.localization.render('blog.code.hid'))",
        'title'      : "$escapetool.javascript($services.localization.render('blog.code.hide'))",
        'hiddenValue': '0',
        'css'        : 'blog-tool-hide'
      }
    };
    
    /**
     * Actions to perform when a blog entry is shown.
     */
    var onEntryMadeVisible = function (entry) {
      entry.removeClass('hidden-article');
      entry.find('&gt;div.warningmessage').hide();
    };
    
    /**
     * Actions to perform when a blog entry is made hidden.
     */
    var onEntryMadeInvisible = function (entry) {
      if (!entry.hasClass('single-article')) {
        entry.addClass('hidden-article');
      }
      var warningMessage = entry.find('&gt;div.warningmessage');
      if (warningMessage.length &gt; 0) {
        warningMessage.show();
      } else {
        warningMessage = $('&lt;div&gt;').addClass('box').addClass('warningmessage');
        warningMessage.text("$escapetool.javascript($services.localization.render('blog.code.hidden'))");
        warningMessage.insertBefore(entry.find('.entry-content'));
      }
    };

    /**
     * Hide/Show entries on click
     */
    var hideShowEntry = function (event) {
     // Don't let the browser fetch the normal link
     event.preventDefault();
     // Get the current object
     var link = $(this);
     // Get the corresponding entry
     var entry = link.parents('.hentry');
     // Hide the link to avoid clicking again on it by mistake during the process
     link.hide();
     // What is the current action that we need to perform
     var currentAction = link.hasClass('blog-tool-hide') ? 'hide' : 'show';
     // We will replace the current link by a new one corresponding to a new action:
     var newAction = currentAction == 'hide' ? actions.show : actions.hide;
     // Display a message while the ajax request is proceeded
     var loadingMessage = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('blog.changeVisibility.changing'))", 'inprogress');
     
     // Perform an ajax query to show/hide the entry.
     $.ajax(link.attr('href'))
       /**
        * On Success
        */
      .done(function() {
        // Replace the icon
        link.find('span.icon-manage').html(newAction.icon);
        // Replace the URL of the link
        var url = link.attr('href').replace(/&amp;comment=(.*?)(&amp;|$)/, "&amp;comment=" + encodeURIComponent(newAction.comment) + "$2");
        url = url.replace(/_hidden=./, '_hidden=' + newAction.hiddenValue);
        link.attr('href', url);
        // Replace the title of the link
        link.attr('title', newAction.title);
        // Replace the css class of the link
        link.attr('class', newAction.css);
        
        if (currentAction == 'hide') {
          onEntryMadeInvisible(entry);
        } else {
          onEntryMadeVisible(entry);
        }
        
        // Display the success message
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('blog.changeVisibility.success'))", 'done');
      })
      /**
       * On error
       */
      .fail(function (jqXHR, textStatus, errorThrown) {
        if (jqXHR.statusCode() == 403) {
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('blog.manageCategories.js.add.error.403'))", 'error');
        } else if (jqXHR.statusCode() == 401) {
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('blog.manageCategories.js.add.error.401'))", 'error');
        } else {
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('blog.code.failedToChangeBlogPostVisibility'))", 'error');
        }
      })
      /**
       * Always
       */
      .always(function () {
        loadingMessage.hide();
        // Show the link again
        link.show();
      });
    };
    
    /**
     * Initialize the blog entries toolbar.
     */
    $('.blog-tool-show,.blog-tool-hide').on('click', hideShowEntry).each(function () {
      // Add "ajax=1" to the URL of the toolbar links
      var link = $(this);
      link.attr('href', link.attr('href').replace(/xredirect=.*?(&amp;|$)/, "ajax=1$1"));
    });
    
  });

});
</code>
    </property>
    <property>
      <name>Make the show/hide buttons asynchronous</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
