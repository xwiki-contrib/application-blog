<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Blog.BlogCode" locale="">
  <web>Blog</web>
  <name>BlogCode</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1373016402000</creationDate>
  <parent>Blog.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1373018317000</date>
  <contentUpdateDate>1373018155000</contentUpdateDate>
  <version>1.1</version>
  <title>Macros for the Blog application</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Blog.BlogParameters"/}}

{{velocity output="false"}}
##
##
##
## Import the blog skin and javascripts.
$!xwiki.ssx.use($blogStyleDocumentName)##
$!xwiki.jsx.use($blogScriptsDocumentName)##
##
## import the hierarchy for the path the blog post footer (in displayEntryBlogLocation)
#template('hierarchy_macros.vm')##
##
##
#**
 * Prints a blog. This is the main macro used in the BlogSheet.
 * 
 * @param blogDoc the XDocument holding the blog definition object.
 *###
#macro(printBlog $blogDoc)
  {{include reference='Blog.CreatePost'/}}

  ## Use the blogPostList macro to display the blogposts
  ## The blogPostList is used only in case of 'all' or 'paged' blog display type because the blogPostList macro 
  ## do not support FTM the monthly and weekly blog display types
  #getBlogDisplayType($blogDoc $displayType)
  #if ($displayType == 'weekly' || $displayType == 'monthly')
    #getBlogEntries($blogDoc $entries)
    #displayBlog($entries 'index' true true)
    #displayNavigationLinks($blogDoc)
  #else
    #getBlogDisplayType($blogDoc $displayType)
    #set ($paginated = 'no')
    #if ($displayType == 'paginated')
      #set ($paginated = 'yes')
    #end
    #getBlogPostsLayout($blogDoc $postsLayout)
    (% class="hfeed index" %)((({{blogpostlist blog="$blogDoc.fullName.replaceAll('~', '~~').replaceAll('"', '~"')" paginated="$paginated" layout="$!postsLayout.replaceAll('~', '~~').replaceAll('"', '~"')" /}})))
  #end
#end
##
##
##
#**
 * Shows blog information. In view mode, the description is printed. In edit mode, allows changing blog settings: title,
 * description, blog type (global or in-space), index display type (fixed size pagination, weekly index, monthly index,
 * all entries).
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 *###
#macro(showBlogInfo $blogDoc)
  #if($blogDoc.getObject($blogClassname))
    ## Keep testing for inline action for backward compatibility with older blogs.
    #if($xcontext.action == 'edit' || $xcontext.action == 'inline')
      #macro(displayProperty $blogDoc $propname)
        ; #displayPropName($xwiki.getClass($blogClassname).get($propname)):
        : $blogDoc.display($propname)
      #end
      #displayProperty($blogDoc 'title')
      #displayProperty($blogDoc 'description')
      #displayProperty($blogDoc 'displayType')
      #displayProperty($blogDoc 'itemsPerPage')
      #displayProperty($blogDoc 'postsLayout')
      #displayProperty($blogDoc 'postsLayoutParameters')
    #else
      $blogDoc.display('description')
    #end
  #elseif($doc.fullName == $blogSheet)
= $services.localization.render('blog.code.blogsheet') =
    {{translation key='blog.code.sheetexplanation'/}}
  #else
    {{warning}}{{translation key='blog.code.notblog'/}}{{/warning}}
  #end
#end
##
##
##
#**
 * Retrieve the blog document, which usually is either &lt;tt&gt;&amp;lt;Space&amp;gt;.WebHome&lt;/tt&gt; for whole-spaces blogs, or
 * &lt;tt&gt;&amp;lt;Space&amp;gt;.Blog&lt;/tt&gt; for in-space blogs. If none of these documents contains a blog object, then the first
 * (alphabetically) document in the target space that contains one is returned. Finally, if no document in the current
 * space contains a blog object, then &lt;tt&gt;Blog.WebHome&lt;/tt&gt; is returned as the default blog.
 * 
 * @param space A &lt;tt&gt;String&lt;/tt&gt;, the name of the space where to search.
 * @param blogDoc The resulting XDocument.
 *###
#macro(getBlogDocument $space $blogDoc)
  #set ($result = $NULL)
  ## Check if the current space has a WebPreferences page that contains a Blog.EnablePanelsConfigurationClass object.
  ## It is possible to display a blog's panels info in a page that is not inside a blog and in that case we need to
  ## identify the right blog based on a configuration object in a WebPreferences page.
  #set ($spaceReference = $services.model.resolveSpace($space))
  #set ($preferencesDocRef = $services.model.createDocumentReference('WebPreferences', $spaceReference))
  #set ($preferencesDoc = $xwiki.getDocument($preferencesDocRef))
  #set ($preferencesObj = $preferencesDoc.getObject('Blog.EnablePanelsConfigurationClass'))
  #if ($preferencesObj)
    #set ($result = $xwiki.getDocument( $preferencesObj.getValue('blog')))
  #end
  ## If no special case occurs (like the previous one), identify a blog by checking the current location from its hierarchy.
  #if ("$!result" == '')
    ## First, try the Space.WebHome, for a whole-space blog
    #set($result = $xwiki.getDocument("${space}.WebHome"))
    #if(!$result.getObject($blogClassname))
      ## Second, try the Space.Blog document
      #set($result = $xwiki.getDocument("${space}.Blog"))
      #if(!$result.getObject($blogClassname))
        ## Third, try searching for a blog document in the current space
        ## Prevent the query fail when the space contains dots '.'
        #set($blogDocs = $services.query.hql(", BaseObject obj where doc.space = :space and obj.name = doc.fullName and obj.className = '$blogClassname' order by doc.name").setLimit(1).setOffset(0).bindValue('space', $space).execute())
        #if($blogDocs.size() &gt; 0)
          #set($result = $xwiki.getDocument($blogDocs.get(0)))
        #else
          ## Fourth, try searching for a blog document that have the its 'postsLocation' set to the current space
          #set($blogDocs = $services.query.hql(", BaseObject obj, StringProperty as postsLocationProp where obj.name = doc.fullName and obj.className = '$blogClassname' and obj.id=postsLocationProp.id.id and postsLocationProp.id.name='postsLocation' and postsLocationProp.value=:postsLocation order by doc.name").setLimit(1).setOffset(0).bindValue('postsLocation', $space).execute())
          #if($blogDocs.size() &gt; 0)
            #set($result = $xwiki.getDocument($blogDocs.get(0)))
          #else
            ## Last, fallback to Blog.WebHome, the default blog
            #set($result = $xwiki.getDocument('Blog.WebHome'))
          #end
        #end
      #end
    #end
  #end
  #set ($blogDoc = $NULL)
  #setVariable ("$blogDoc" $result)
#end
##
##
##
#**
 * Retrieve the blog title.
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;tt&gt; object with the &lt;tt&gt;title&lt;/tt&gt; property set.
 * @param title The resulting title.
 *###
#macro(getBlogTitle $blogDoc $title)
  ## Titles can contain velocity code (most commonly translations), so we should evaluate them.
  #set ($title = $NULL)
  #setVariable ("$title" $!blogDoc.displayTitle)
#end
##
##
##
#**
 * Retrieve the blog description.
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object with the &lt;tt&gt;description&lt;/tt&gt;
 *        property set.
 * @param description The resulting description.
 *###
#macro(getBlogDescription $blogDoc $description)
  #getBlogProperty($blogDoc 'description' '' $result)
  #set ($description = $NULL)
  #setVariable ("$description" $result)
#end
##
##
##
#**
 * Retrieves a list of entries to be displayed. The entries are either part of the blog's space, or have the blog
 * document set as a parent. The number and range of entries returned (from all those belonging to this blog) depends on
 * the blog display type: paginated (fixed number of entries), weekly (all entries in a week), monthly (all entries in a
 * month), or all.
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 * @param entries The resulting list of entries to display, a list of XDocument names.
 *###
#macro(getBlogEntries $blogDoc $entries)
  #if (!$entries)
    #setVariable ("$entries" [])
  #end
  #getAllBlogPostsQuery($query)
  #isDefaultBlog($blogDoc $isDefault)
  #set($queryParams = {})
  #if ($isDefault)
    #getCategoryAllBlogPostsQuery($query)
    #set($query = "${query} and (doc.creator = :creator or (isPublished.value = 1 and hidden.value = 0)) and (doc.space = :space or catList like :catList escape '!')")
    #set($discard = $queryParams.put('creator', $xcontext.user))
    #set($discard = $queryParams.put('space', $blogDoc.space))
    #set($sanitizedBlogSpace = $blogDoc.space.replaceAll('([%_!])', '!$1').concat('.%'))
    #set($discard = $queryParams.put('catList', $sanitizedBlogSpace))
  #else
    #set($query = "${query} and (doc.space = :space or doc.parent = :parent)")
    #getBlogPostsLocation($blogDoc.space $blogPostsLocation)
    #set($discard = $queryParams.put('space', $blogPostsLocation))
    #set($discard = $queryParams.put('parent', $blogDoc.space))
  #end
  #getBlogDisplayType($blogDoc $displayType)
  #if($displayType == 'weekly')
    #getWeeklyBlogEntries($blogDoc $query $entries $queryParams)
  #elseif($displayType == 'monthly')
    #getMonthlyBlogEntries($blogDoc $query $entries $queryParams)
  #elseif($displayType == 'all')
    #getAllBlogEntries($blogDoc $query $entries $queryParams)
  #else
    #getPagedBlogEntries($blogDoc $query $entries $queryParams)
  #end
#end
##
##
##
#**
 * Retrieves a list of entries to be displayed. The entries are taken from a "page" of the blog, a sequence of documents
 * defined by the request parameters &lt;tt&gt;ipp&lt;/tt&gt; (items per page) and &lt;tt&gt;page&lt;/tt&gt; (the current page). Initially the
 * first page is displayed, with the number of entries defined in the blog object in the &lt;tt&gt;itemsPerPage&lt;/tt&gt; property 
 * (10 if not defined).
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 * @param query The base query for selecting entries. Apart from the base query that selects entries, it can further be
 *        refined to restrict to a given space, or to a given search criteria, etc.
 * @param entries The resulting list of entries to display, a list of XDocument names.
 * @param queryParams The parameters to bind with the query.
 *###
#macro(getPagedBlogEntries $blogDoc $query $entries $queryParams)
  #if (!$entries)
    #setVariable ("$entries" [])
  #end
  #set($countQueryObj = $services.query.hql($query).addFilter("unique"))
  #set($queryObj = $services.query.hql("${query} order by publishDate.value desc"))
  #bindQueryParameters($countQueryObj $queryParams)
  #bindQueryParameters($queryObj $queryParams)
  #set($totalEntries = $countQueryObj.count())
  #getBlogProperty($blogDoc 'itemsPerPage' '10' $defaultItemsPerPage)
  #set($defaultItemsPerPage = $numbertool.toNumber($defaultItemsPerPage).intValue())
  ## This macro is defined in the default macros.vm library. It also sets $itemsPerPage and $startAt.
  #preparePagedViewParams($totalEntries $defaultItemsPerPage)
  #set($discard = $entries.addAll($queryObj.setLimit($itemsPerPage).setOffset($startAt).addFilter("unique").execute()))
#end
##
##
##
#**
 * Retrieves a list of entries to be displayed. The entries are taken from a week of the blog. The target week is
 * defined by the request parameters &lt;tt&gt;week&lt;/tt&gt; (the week number in the year, from 1 to 52) and &lt;tt&gt;year&lt;/tt&gt; (4 
 * digit year). Initially the current week is displayed.
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 * @param query The base query for selecting entries. Apart from the base query that selects entries, it can further be
 *        refined to restrict to a given space, or to a given search criteria, etc.
 * @param entries The resulting list of entries to display, a list of XDocument names.
 * @param queryParams The parameters to bind with the query.
 *###
#macro(getWeeklyBlogEntries $blogDoc $query $entries $queryParams)
  #if (!$entries)
    #setVariable ("$entries" [])
  #end
  #getRequestedWeek($weekDate)
  #set($dateFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('yyyy-MM-dd'))
  #set($minDay = $dateFormatter.print($weekDate.toMutableDateTime().weekOfWeekyear().roundFloor()))
  #set($maxDay = $dateFormatter.print($weekDate.toMutableDateTime().weekOfWeekyear().roundCeiling()))
  #set($query = "${query} and publishDate.value &gt;= '$minDay' and publishDate.value &lt; '$maxDay'")
  #set($countQueryObj = $services.query.hql($query).addFilter("unique"))
  #set($queryObj = $services.query.hql("${query} order by publishDate.value desc").addFilter("unique"))
  #bindQueryParameters($countQueryObj $queryParams)
  #bindQueryParameters($queryObj $queryParams)
  #set($totalEntries = $countQueryObj.count())
  #set($discard = $entries.addAll($queryObj.execute()))
#end
##
##
##
#**
 * Retrieves a list of entries to be displayed. The entries are taken from a month of the blog. The target month is
 * defined by the request parameters &lt;tt&gt;month&lt;/tt&gt; (the month number, from 1 to 12) and &lt;tt&gt;year&lt;/tt&gt; (4 
 * digit year). Initially the current month is displayed.
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 * @param query The base query for selecting entries. Apart from the base query that selects entries, it can further be
 *        refined to restrict to a given space, or to a given search criteria, etc.
 * @param entries The resulting list of entries to display, a list of XDocument names.
 * @param queryParams The parameters to bind with the query.
 *###
#macro(getMonthlyBlogEntries $blogDoc $query $entries)
  #if (!$entries)
    #setVariable ("$entries" [])
  #end
  #getRequestedMonth($monthDate)
  #set($dateFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('yyyy-MM-dd'))
  #set($minDay = $dateFormatter.print($monthDate.toMutableDateTime().monthOfYear().roundFloor()))
  #set($maxDay = $dateFormatter.print($monthDate.toMutableDateTime().monthOfYear().roundCeiling()))
  #set($query = "${query} and publishDate.value &gt;= '$minDay' and publishDate.value &lt; '$maxDay'")
  #set($countQueryObj = $services.query.hql($query).addFilter("unique"))
  #set($queryObj = $services.query.hql("${query} order by publishDate.value desc").addFilter("unique"))
  #bindQueryParameters($countQueryObj $queryParams)
  #bindQueryParameters($queryObj $queryParams)
  #set($totalEntries = $countQueryObj.count())
  #set($discard = $entries.addAll($queryObj.execute()))
#end
##
##
##
#**
 * Retrieves a list of entries to be displayed. All entries belonging to the current blog are returned.
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 * @param query The base query for selecting entries. Apart from the base query that selects entries, it can further be
 *        refined to restrict to a given space, or to a given search criteria, etc.
 * @param entries The resulting list of entries to display, a list of XDocument names.
 * @param queryParams The parameters to bind with the query.
 *###
#macro(getAllBlogEntries $blogDoc $query $entries $queryParams)
  #if (!$entries)
    #setVariable ("$entries" [])
  #end
  #set($countQueryObj = $services.query.hql($query).addFilter("unique"))
  #set($queryObj = $services.query.hql("${query} order by publishDate.value desc").addFilter("unique"))
  #bindQueryParameters($countQueryObj $queryParams)
  #bindQueryParameters($queryObj $queryParams)
  #set($totalEntries = $countQueryObj.count())
  #set($discard = $entries.addAll($queryObj.execute()))
#end
##
##
##
#**
 * Retrieves a list of entries to be displayed. Only (and all) unpublished entries are returned.
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 * @param query The base query for selecting entries. Apart from the base query that selects entries, it can further be
 *        refined to restrict to a given space, or to a given search criteria, etc.
 * @param queryParams The parameters to bind with the query.
 * @param entries The resulting list of entries to display, a list of XDocument names.
 *###
#macro(getUnpublishedBlogEntries $blogDoc $query $queryParams $entries)
  #if (!$entries)
    #setVariable ("$entries" [])
  #end
  #set($query = "${query} and isPublished.value = 0")
  #set ($countQueryObj = $services.query.hql($query).addFilter("unique"))
  #set ($queryObj = $services.query.hql("${query} order by publishDate.value desc").addFilter("unique"))
  #bindQueryParameters($countQueryObj $queryParams)
  #bindQueryParameters($queryObj $queryParams)
  #set($totalEntries = $countQueryObj.count())
  #set($discard = $entries.addAll($queryObj.execute()))
#end
##
##
##
#**
 * Retrieves a list of entries to be displayed. The entries are taken from all the wiki, and not from a specific blog.
 * 
 * @param entries The resulting list of entries to display, a list of XDocument names.
 *###
#macro(getGlobalBlogEntries $entries)
  #if (!$entries)
    #setVariable ("$entries" [])
  #end
  #getAllBlogPostsQuery($query)
  #set($totalEntries = $services.query.hql($query).count())
  #set($defaultItemsPerPage = 20)
  ## This macro is defined in the default macros.vm library. It also sets $itemsPerPage and $startAt.
  #preparePagedViewParams($totalEntries $defaultItemsPerPage)
  #set($discard = $entries.addAll($services.query.hql("${query} order by publishDate.value desc").setLimit($itemsPerPage).setOffset($startAt).execute()))
#end
#**
 * Return the base query for selecting blog entries. It filters only visible entries, but does not bind to a specific
 * blog, nor specify a range or an ordering criteria.
 *
 * This macro is a duplicate of #getAllBlogPostsQuery($query). Keep it in case it's used outside, in custom code.
 *
 * @param query The basic query for selecting blog entries.
 *#
#macro(getBlogEntriesBaseQuery $query)
  #getAllBlogPostsQuery($query)
#end
#**
 * Return the Query for selecting the all wiki blog posts without filtering
 *
 * @param query The basic query for selecting blog entries.
 *#
#macro(getAllBlogPostsQuery $query)
  #set ($query = $NULL)
  #setVariable("$query" ", BaseObject as obj, IntegerProperty isPublished,
    IntegerProperty hidden, DateProperty publishDate
    where doc.fullName &lt;&gt; '$blogPostTemplate' and
    obj.name=doc.fullName and obj.className='$blogPostClassname' and
    isPublished.id.id = obj.id and isPublished.id.name = 'published' and
    hidden.id.id = obj.id and hidden.id.name='hidden' and
    publishDate.id.id = obj.id and publishDate.id.name='publishDate' and
    (doc.creator = '$escapetool.sql($xcontext.user)' or (isPublished.value = 1 and hidden.value = 0))")
#end
##
##
##
###**
 * Return the Query for selecting the all wiki blog posts with categories filtering
 * 
 * @param query The basic query for selecting blog entries.
 *###
#macro(getCategoryAllBlogPostsQuery $query)
  #set ($query = $NULL)
  #getAllBlogPostsQuery($baseQuery)
  #set ($baseQuery = $baseQuery.replace('DateProperty publishDate', 'DateProperty publishDate, DBStringListProperty as category left join category.list catList'))
  #setVariable("$query" "${baseQuery} and obj.id=category.id.id and category.id.name='category'")
#end
##
##
##
#**
 * Determines how is the blog index split into pages: paginated (fixed number of entries), weekly (all entries in a
 * week), monthly (all entries in a month), or all.
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object with the &lt;tt&gt;displayType&lt;/tt&gt;
 *        property set.
 * @param displayType The resulting string. If the blog object does not define anything, it is considered paginated.
 *###
#macro(getBlogDisplayType $blogDoc $displayType)
  #getBlogProperty($blogDoc 'displayType' 'paginated' $result)
  #set ($displayType = $NULL)
  #setVariable ("$displayType" $result)
#end
##
##
##
#**
 * Displays a list of entries.
 * 
 * @param entries The entries to display, a list of XDocument names.
 * @param displaying What exactly is displayed: blog index, a single blog entry, a blog category, search results,
 *        unpublished entries, etc. This will be used as the classname(s) for the container div (hfeed). Currently
 *        used values: index, single, category, search, unpublished, hidden.
 * @param onlyExtract If &lt;tt&gt;true&lt;/tt&gt;, only display the extract of articles where available, otherwise display the full content.
 * @param shouldDisplayTitles If &lt;tt&gt;true&lt;/tt&gt;, display the blog title (blog posts shouldn't display the title when they're
 *        displayed alone on their page since it's the page title which is used in this case)
 *###
#macro(displayBlog $entries $displaying $onlyExtract $shouldDisplayTitles)
  #set($blogDay = '')
  (% class="hfeed $!{displaying}" %)(((
  (% class="blogDay" %)(((
  #foreach ($entryDoc in $xwiki.wrapDocs($entries))
    #getEntryObject($entryDoc $entryObj)
    ## Although all entries should have one of the two objects, better check to be sure.
    #if("$!{entryObj}" != '')
      #getEntryDate($entryDoc $entryObj $entryDate)
      ## Display a "calendar sheet" for each day. All entries posted on the same day share one such sheet.
      #set($entryDateStr = $xwiki.formatDate($entryDate, 'yyyyMMMMdd'))
      #if($blogDay != $entryDateStr)
        #if($blogDay != '')
          )))
          (% class="blogDay" %)(((
        #end
        #displayBlogDate($entryDate)
        #set ($blogDay = $entryDateStr)
      #end
      ## Finally, display the entry.
      #displayEntry($entryDoc $entryObj $onlyExtract $shouldDisplayTitles true)
    #end
  #end
  )))## blogDay
  )))## hfeed
#end
##
##
##
#**
 * Get the entry object, either a new BlogPost or an old Article.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The resulting xobject of the blog post.
 *###
#macro(getEntryObject $entryDoc $__entryObj)
  #set($result = $entryDoc.getObject("${blogPostClassname}"))
  #if(!$result)
    #set($result = $entryDoc.getObject("${oldArticleClassname}"))
  #end
  ## NOTE: The reason we put an underscore in front of the variable name is to prevent the following line from
  ## overwriting the $entryObj variable that may be defined before this macro is called. Of course, $__entryObj may be
  ## overwritten in this case but it's less likely to have such a variable defined before.
  #set ($__entryObj = $NULL)
  #setVariable ("$__entryObj" $result)
#end
##
##
##
#**
 * Gets the date associated with a blog entry. This is the publication date. For unpublished entries, initially this is
 * the document creation date, but can be edited by the user.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @param result The resulting date, an instance of &lt;tt&gt;java.util.Date&lt;/tt&gt;.
 *###
#macro(getEntryDate $entryDoc $entryObj $result)
  #set ($result = $NULL)
  #setVariable ("$result" $entryObj.getProperty('publishDate').value)
#end
##
##
##
#**
 * Displays a date, nicely formatted as a calendar page.
 * 
 * @param date The date to display, an instance of &lt;tt&gt;java.util.Date&lt;/tt&gt;.
 *###
#macro(displayBlogDate $date)
  #set($year = $xwiki.formatDate($date, 'yyyy'))
  ## 3 letter month name, like Jan, Dec.
  #set($month = $xwiki.formatDate($date, 'MMM'))
  ## Uncomment to get a full length month name, like January, December.
  ## TODO: this could be defined somewhere in the blog style.
  ## #set($month = $xwiki.formatDate($date, 'MMMM'))
  #set($day = $xwiki.formatDate($date, 'dd'))
  (% class="blogdate" %)
  == (% class="month" %)$month(%%) (% class="day" %)$day(%%) (% class="year" %)$year(%%) ==
#end
##
##
##
#**
 * Displays a blog article: management tools, header, content, footer.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @param onlyExtract If &lt;tt&gt;true&lt;/tt&gt;, try to display only a summary of the entry, instead of the full content.
 * @param shouldDisplayTitle If &lt;tt&gt;true&lt;/tt&gt;, display the blog title (blog posts shouldn't display the title 
 *        when they're displayed alone on their page since it's the page title which is used in this case)
 * @param shouldDisplayActions If &lt;tt&gt;true&lt;/tt&gt;, display the blog post actions buttons
 *###
#macro(displayEntry $entryDoc $entryObj $onlyExtract $shouldDisplayTitle $shouldDisplayActions)
  ## Only articles with an explicit hidden setting or an explicit unpublished setting are hidden
  #isPublished($entryObj $isPublished)
  #isHidden($entryObj $isHidden)
  #if($doc.fullName == $entryDoc.fullName)
    (% class="hentry single-article" %)(((
  #else
    (% class="hentry#if(!$isPublished) unpublished-article#elseif($isHidden) hidden-article#end" %)(((
  #end
  #if ($shouldDisplayActions)
    #displayEntryTools($entryDoc $entryObj)
  #end
  #if($shouldDisplayTitle)
    #displayEntryTitle($entryDoc $entryObj)
  #end
  #if($doc.fullName == $entryDoc.fullName)
    #if(!$isPublished)
      {{warning}}{{translation key='blog.code.published'/}}{{/warning}}
    #elseif($isHidden)
      {{warning}}{{translation key='blog.code.hidden'/}}{{/warning}}
    #end
  #end
  #displayEntryContent($entryDoc $entryObj $onlyExtract)
  #displayEntryFooter($entryDoc $entryObj)
  )))## hentry
#end
##
##
##
#**
 * Checks if the provided blog is published or not.
 * 
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @param isPublished The resulting boolean, true if the entry is considered published.
 *###
#macro(isPublished $entryObj $isPublished)
  #set ($isPublished = $NULL)
  ## This should work for both old articles, which don't have the 'published' property at all, and
  ## are considered published by default, and new entries, that should have 1 if published.
  #if ("$!{entryObj.getProperty('published').value}" != '0')
    #setVariable ("$isPublished" true)
  #else
    #setVariable ("$isPublished" false)
  #end
#end
##
##
##
#**
 * Checks if the provided blog is hidden or not.
 * 
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;tt&gt; xclass.
 * @param isHiddel The resulting boolean, true if the entry is considered hidden.
 *###
#macro(isHidden $entryObj $isHidden)
  #set ($isHidden = $NULL)
  ## This should work for both old articles, which don't have the 'hidden' property at all, and
  ## are considered visible by default, and new entries, that should have 1 if hidden.
  #if ("$!{entryObj.getProperty('hidden').value}" == '1')
    #setVariable ("$isHidden" true)
  #else
    #setVariable ("$isHidden" false)
  #end
#end
##
##
##
#**
 * Displays several "tools" for manipulating blog posts: hide/show, publish, edit.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayEntryTools $entryDoc $entryObj)
  #if($xcontext.action == 'view')
    (% class="blog-entry-toolbox" %)(((
    #displayPublishButton($entryDoc $entryObj)
    #displayHideShowButton($entryDoc $entryObj)
    #displayEditButton($entryDoc $entryObj)
    #displayDeleteButton($entryDoc $entryObj)
    )))
  #end
#end
##
##
##
#**
 * Displays the publish button to the entry &lt;strong&gt;creator&lt;/strong&gt;, if the article is not published yet.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @todo AJAX calls.
 *###
#macro(displayPublishButton $entryDoc $entryObj)
  #isPublished($entryObj $isPublished)
  #if(!$isPublished &amp;&amp; $entryDoc.creator == $xcontext.user &amp;&amp; $xwiki.hasAccessLevel('edit', $xcontext.user, $entryDoc.fullName))
    [[#toolImage('world')&gt;&gt;path:$blogPublisher.getURL('view', "entryName=${escapetool.url($entryDoc.fullName)}&amp;xredirect=${escapetool.url($thisURL)}&amp;form_token=$!{services.csrf.getToken()}")||title="$services.localization.render('blog.code.notpublished')"]]##
  #end
#end
##
##
##
#**
 * Displays the hide or show button to the entry &lt;strong&gt;creator&lt;/strong&gt;, if the article is already published.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayHideShowButton $entryDoc $entryObj)
  #isPublished($entryObj $isPublished)
  #isHidden($entryObj $isHidden)
  ## Only published articles can be hidden. Unpublished articles are considered already hidden.
  #if($isPublished &amp;&amp; $entryDoc.creator == $xcontext.user &amp;&amp; $xwiki.hasAccessLevel('edit', $xcontext.user, $entryDoc.fullName))
    #set ($queryString = {
      'xredirect'  : $thisURL, 
      'form_token' : $services.csrf.getToken()
      })
    #if ($isHidden)
      #set ($discard = $queryString.putAll({
        "${entryObj.getxWikiClass().getName()}_${entryObj.number}_hidden" : 0,
        'comment' : $services.localization.render('blog.code.madevisible')
        }))
      #set ($lockURL = $entryDoc.getURL('save', $escapetool.url($queryString)))
      [[#toolImage('unlock')&gt;&gt;path:$lockURL||class="blog-tool-show" title="$services.localization.render('blog.code.makevisible')"]]##
    #else
      #set ($discard = $queryString.putAll({
        "${entryObj.getxWikiClass().getName()}_${entryObj.number}_hidden" : 1,
        'comment' : $services.localization.render('blog.code.hid')
        }))
      #set ($lockURL = $entryDoc.getURL('save', $escapetool.url($queryString)))
      [[#toolImage('lock')&gt;&gt;path:$lockURL||class="blog-tool-hide" title="$services.localization.render('blog.code.hide')"]]##
    #end
  #end
#end
##
##
##
#**
 * Displays the edit button to those that can edit the article.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayEditButton $entryDoc $entryObj)
  #if($xwiki.hasAccessLevel('edit', $xcontext.user, $entryDoc.fullName))
    ## Call getDefaultEditMode() for backward compatibility with older blog posts.
    [[#toolImage('pencil')&gt;&gt;path:$entryDoc.getURL('edit')||title="$services.localization.render('blog.code.editpost')"]]##
  #end
#end
##
##
##
#**
 * Displays the delete button to those that can edit the article.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @todo AJAX calls.
 *###
#macro(displayDeleteButton $entryDoc $entryObj)
  #if($xwiki.hasAccessLevel('delete', $xcontext.user, $entryDoc.fullName))
    [[#toolImage('cross')&gt;&gt;path:$entryDoc.getURL('delete')||title="$services.localization.render('blog.code.deletepost')"]]##
  #end
#end
##
##
##
#**
 * Displays the title of the entry.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayEntryTitle $entryDoc $entryObj)
  #if($doc.fullName == $entryDoc.fullName)
    (% class="entry-title" %)
    = $services.rendering.escape($entryDoc.display('title', 'view', $entryObj), $xwiki.getCurrentContentSyntaxId()) =
  #else
    (% class="entry-title" %)
    === [[$services.rendering.escape($entryDoc.display('title', 'view', $entryObj),$xwiki.getCurrentContentSyntaxId())&gt;&gt;doc:$services.rendering.escape($services.model.serialize($entryDoc.getDocumentReference(),'default'),$xwiki.getCurrentContentSyntaxId())]] ===
  #end
#end
##
##
##
#**
 * Displays the body of the entry.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @param onlyExtract If &lt;tt&gt;true&lt;/tt&gt;, try to display only a summary of the entry, instead of the full content.
 *###
#macro(displayEntryContent $entryDoc $entryObj $onlyExtract)
  (% class="#if($onlyExtract)entry-summary#{else}entry-content#end" %)(((
  #getEntryContent($entryDoc $entryObj $onlyExtract $entryContent)
  ## FIXME: This causes the blog's content to not be annotatable. See http://jira.xwiki.org/browse/XWIKI-6328
  ##        Should probably be replaced by a display macro call with a reference to the object property holding the post's content
  {{html wiki="false"}}$entryDoc.getRenderedContent($entryContent, $entryDoc.syntax.toIdString()){{/html}}
  ))) ## entry-content
  (% class="clearfloats" %)((()))
#end
##
##
##
#**
 * Extracts the body of the entry that should be displayed. If &lt;tt&gt;onlyExtract&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt;, display the content
 * of the &lt;tt&gt;extract&lt;/tt&gt; field (if not empty).
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @param onlyExtract If &lt;tt&gt;true&lt;/tt&gt;, try to display only a summary of the entry, instead of the full content.
 * @param entryContent The resulting content.
 *###
#macro(getEntryContent $entryDoc $entryObj $onlyExtract $entryContent)
  #if ($onlyExtract)
    ## Note: We trim the summary so that if there's some white space it won't cause the summary to be used instead
    ## of the content.
    #set ($macro.result = $entryObj.getProperty('extract').value.trim())
  #end
  #if("$!macro.result" == '')
    #set($macro.result = $entryObj.getProperty('content').value)
#* Disabled until the content can be cleanly cut.
*    #if($onlyExtract &amp;&amp; $result.length()&gt;$maxchars)
*      #set($i = $macro.result.lastIndexOf(" ", $maxchars))
*      #set($i = $i + 1)
*      #set($macro.result = "${macro.result.substring(0,$i)} *[...&gt;${entryDoc.fullName}]*")
*    #end
## *###
  #else
    #if($entryDoc.syntax.toIdString() == 'xwiki/1.0')
      #set($macro.result = "${macro.result} &lt;a href='${entryDoc.getURL()}' title='$services.localization.render('blog.code.readpost')'&gt;...&lt;/a&gt;")
    #elseif($entryDoc.syntax.toIdString() == 'xwiki/2.0' || $entryDoc.syntax.toIdString() == 'xwiki/2.1')
      #set($macro.result = "${macro.result} [[...&gt;&gt;${services.rendering.escape($entryDoc.getFullName(), $entryDoc.getSyntax())}||title='$services.localization.render('blog.code.readpost')']]")
    #end
  #end
  #set ($entryContent = $NULL)
  #setVariable ("$entryContent" $macro.result)
#end
##
##
##
#**
 * Displays the footer of the entry.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayEntryFooter $entryDoc $entryObj)
  (% class="entry-footer" %)(((
  #isPublished($entryObj $isPublished)
  (% class='entry-author-label' %)
  #if($isPublished)
    {{translation key='blog.code.postedby'/}} ##
  #else
    {{translation key='blog.code.createdby'/}} ##
  #end
  {{html wiki="false" clean="false"}}&lt;span class='author vcard'&gt;#userfn($entryDoc.creator)&lt;/span&gt;{{/html}} ##
  #getEntryDate($entryDoc $entryObj $entryDate)
  #listCategories($entryObj) #*
  ## Since the publish date and update date are not set at the exact same time, there could be a small difference that
  ## we assume cannot be more than 3 seconds.
  *#(% class="separator" %)·(%%) [[{{translation key='blog.code.permalink'/}}&gt;&gt;$services.rendering.escape($entryDoc,'xwiki/2.0')||rel="bookmark"]] ##
  #if ($showcomments)
    (% class="separator" %)·(%%) [[{{translation key='blog.code.comments'/}}&gt;&gt;$services.rendering.escape($entryDoc,'xwiki/2.0')||anchor="Comments"]] (% class="itemCount" %)($entryDoc.comments.size())(%%) ##
  #end ##
  #if($entryDoc != $doc) ##
    #displayEntryBlogLocation($entryDoc $entryObj) ##
  #end
  )))## entry-footer
#end
##
##
#**
 * Display the blog for the entry (if it is not the currently displayed blog)
 *
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayEntryBlogLocation $entryDoc $entryObj)
  #getBlogPostsLocation($entryDoc.getSpace() $blogPostsLocation) ##
  #if("$!blogPostsLocation" != "") ##
    #set($blogSpaceRef = $services.model.resolveSpace($blogPostsLocation)) ##
    #set($blogDocRef = $services.model.createDocumentReference($services.model.getEntityReference('DOCUMENT', 'default').getName(), $blogSpaceRef)) ##
    #if($doc.documentReference != $blogDocRef) ##
      #set($blogDoc = $xwiki.getDocument($blogDocRef)) ##
      #set($blogObj = $blogDoc.getObject('Blog.BlogClass')) ##
      #if($blogObj) (% class="blogrefpath" %)((( ##
        $services.localization.render('blog.code.postedin') {{html clean="false" wiki="false"}} #hierarchy($blogDocRef, {'selfIsActive' : true, 'local': true}) {{/html}} ##
        )))(%%)##
      #end
    #end
  #end
#end
##
##
##
##
#**
 * List the categories an entry belongs to. Used in the footer. The categories are instances of &lt;tt&gt;Blog.CategoryClass&lt;/tt&gt;.
 * 
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(listCategories $entryObj)
  #if($entryObj.getxWikiClass().getName() == $blogPostClassname)
    #set($categories = $entryObj.getProperty('category').value)
    #set($first = true)
    #if($categories.size() &gt; 0)
      #foreach($category in $categories)
        #set($categoryDoc = $!xwiki.getDocument($category))
        #if(!$categoryDoc.isNew() &amp;&amp; $categoryDoc.getObject(${blogCategoryClassname}))
          #if($foreach.count == 1)
            (% class='separator' %)·(%%) $services.localization.render('blog.code.categories') ##
          #else
            , ##
          #end##
          [[$!{categoryDoc.getObject($blogCategoryClassname).getValue('name')}&gt;&gt;${category}||rel='tag']]##
        #end##
      #end##
    #end
  #end
#end
##
##
##
#**
 * Displays blog pagination links (older and newer entries).
 * 
 * @param blogDoc the XDocument holding the blog definition object.
 *###
#macro(displayNavigationLinks $blogDoc)
  (% class="clearfloats" %)((()))
  #getBlogDisplayType($blogDoc $displayType)
  #if($displayType == 'weekly')
    (% class="pagingLinks" %)(((
    #getRequestedWeek($weekDate)
    $weekDate.addWeeks(-1)##
    (% class="prevPage" %)**[[« {{translation key='blog.code.previousweek'/}}&gt;&gt;$doc.documentReference.name||queryString="year=$weekDate.weekyear&amp;week=$weekDate.weekOfWeekyear" class="button"]]**(%%)
    #sep()
    $weekDate.addWeeks(2)## 2 because we already subtracted 1 above
    (% class="nextPage" %)**[[{{translation key='blog.code.nextweek'/}} »&gt;&gt;$doc.documentReference.name||queryString="year=$weekDate.weekyear&amp;week=$weekDate.weekOfWeekyear" class="button"]]**(%%)
    )))
  #elseif($displayType == 'monthly')
    (% class="pagingLinks" %)(((
    #getRequestedMonth($monthDate)
    $monthDate.addMonths(-1)##
    (% class="prevPage" %)**[[« {{translation key='blog.code.previousmonth'/}}&gt;&gt;$services.rendering.escape($doc.documentReference.name,$doc.syntax)||queryString="year=$monthDate.year&amp;month=$monthDate.monthOfYear" class="button"]]**(%%)
    #sep()
    $monthDate.addMonths(2)## 2 because we already subtracted 1 above
    (% class="nextPage" %)**[[{{translation key='blog.code.nextmonth'/}} »&gt;&gt;$services.rendering.escape($doc.documentReference.name,$doc.syntax)||queryString="year=$monthDate.year&amp;month=$monthDate.monthOfYear" class="button"]]**(%%)
    )))
  #elseif($displayType == 'all')
  #else
    ## Paginated
    #if(($totalPages &gt; 1))
      #set($queryString = '')
      #foreach($p in $request.getParameterNames())
        #if($p != 'page' &amp;&amp; $p != 'ipp')
          #foreach($v in $request.getParameterValues($p))
            #set($queryString = "${queryString}&amp;${escapetool.url($p)}=${escapetool.url($v)}")
          #end
        #end
      #end
      (% class="pagingLinks" %)(((
      #if ($currentPageNumber &lt; $totalPages)
        #set($currentPageNumber = $currentPageNumber + 1)
        (% class="prevPage" %)**[[« {{translation key='blog.code.olderposts'/}}&gt;&gt;$services.rendering.escape($doc.documentReference.name,$doc.syntax)||queryString="page=${currentPageNumber}&amp;ipp=${itemsPerPage}$queryString" class="button"]]**(%%)
        #set($currentPageNumber = $currentPageNumber - 1)
      #end
      #if ($currentPageNumber &gt; 1)
        #if ($currentPageNumber &lt; $totalPages)
          #sep()
        #end
        #set($currentPageNumber = $currentPageNumber - 1)
        (% class="nextPage" %)**[[{{translation key='blog.code.newerposts'/}} »&gt;&gt;$services.rendering.escape($doc.documentReference.name,$doc.syntax)||queryString="page=${currentPageNumber}&amp;ipp=${itemsPerPage}$queryString" class="button"]]**(%%)
        #set($currentPageNumber = $currentPageNumber + 1)
      #end
      (% class="clear" %)(%%)
      )))## pagingLinks
    #end
  #end
#end
##
##
##
#**
 * Displays a message box with "publish" icon.
 * 
 * @param message A text message concerning blog article publishing
 *###
#macro(publishMessageBox $message)
(% class="plainmessage publish-message" %)((($services.icon.render('world') $message)))
#end
#**
 * Displays a message box with "show/hide" icon.
 * 
 * @param message A text message concerning blog article hiding
 *###
#macro(hideMessageBox $message)
(% class="plainmessage hide-message" %)((($services.icon.render('unlock') $message)))
#end
##
##
##
#**
 * Determine the requested week, for using in a weekly-indexed blog. The relevant request parameters are
 * &lt;tt&gt;year&lt;/tt&gt; and &lt;tt&gt;week&lt;/tt&gt;. By default, the current week is used.
 * 
 * @param monthDate The resulting week, a JODATime MutableDateTime.
 *###
#macro(getRequestedWeek $weekDate)
  #set ($weekDate = $NULL)
  #setVariable ("$weekDate" $xwiki.jodatime.mutableDateTime)
  #if("$!{request.year}" != '')
    #set ($discard = $weekDate.setYear($numbertool.toNumber($request.year).intValue()))
  #end
  #if("$!{request.week}" != '')
    #set ($discard = $weekDate.setWeekOfWeekyear($numbertool.toNumber($request.week).intValue()))
  #end
#end
##
##
##
#**
 * Determine the requested month, for using in a monthly-indexed blog. The relevant request parameters are
 * &lt;tt&gt;year&lt;/tt&gt; and &lt;tt&gt;month&lt;/tt&gt;. By default, the current month is used.
 * 
 * @param monthDate The resulting month, a JODATime MutableDateTime.
 *###
#macro(getRequestedMonth $monthDate)
  #set ($monthDate = $NULL)
  #setVariable ("$monthDate" $xwiki.jodatime.mutableDateTime)
  #if("$!{request.year}" != '')
    #set ($discard = $monthDate.setYear($numbertool.toNumber($request.year).intValue()))
  #end
  #if("$!{request.month}" != '')
    #set ($discard = $monthDate.setMonthOfYear($numbertool.toNumber($request.month).intValue()))
  #end
#end
##
##
##
#**
 * Retrieve a blog property (title, display type, etc).
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 * @param propertyName The name of the property to be retrieved. One of the &lt;tt&gt;Blog.BlogClass&lt;/tt&gt;'s properties.
 * @param defaultValue The default value to use in case the blog object does not define one.
 * @param propertyValue The resulting value.
 *###
#macro(getBlogProperty $blogDoc $propertyName $defaultValue $propertyValue)
  #set($result = "$!{blogDoc.getObject(${blogClassname}).getProperty($propertyName).value}")
  #if($result == '')
    #set($result = $defaultValue)
  #end
  #set ($propertyValue = $NULL)
  #setVariable ("$propertyValue" $result)
#end

#**
 * If an error occurs when executing an action, set a specific response status and display an error message.
 * 
 * @param status The response status.
 * @param text The user readable error to be displayed. Can be a translation key.
 * @param parameters The parameters to use when decoding the translation key.
 *###
#macro(blog__actionResponseError $status $text $parameters)
  $response.setStatus($status)
  #if($request.ajax)
    $services.localization.render($text, $!parameters)
  #else
    {{error}}$services.localization.render($text, $!parameters){{/error}}
  #end
#end
##
##
##
#**
 * Check if a blog is the Default blog (The one in the 'Blog' space).
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 * @param isDefault The resulting boolean.
 *###
#macro(isDefaultBlog $blogDoc $isDefault)
  #set ($result = false)
  #if ($blogDoc.space == 'Blog')
    #set ($result = true)
  #end
  #setVariable("$isDefault" $result)
#end
##
##
##
#**
 * Retrieve the blog posts location (space).
 *
 * @param blogSpace The blog space. It should contain a document with a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object
 * @param postsLocation The resulting location.
 *###
#macro(getBlogPostsLocation $blogSpace $postsLocation)
  #getBlogDocument($blogSpace $blogDoc)
  #getBlogProperty($blogDoc 'postsLocation' $blogDoc.space $result)
  #set ($postsLocation = $NULL)
  #setVariable ("$postsLocation" $result)
#end
##
##
##
#**
 * Retrieve the blog categories location (space).
 *
 * @param blogSpace The blog space. It should contain a document with a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object
 * @param categoriesLocation The resulting location.
 *###
#macro(getBlogCategoriesLocation $blogSpace $categoriesLocation)
  #getBlogDocument($blogSpace $blogDoc)
  #getBlogProperty($blogDoc 'categoriesLocation' 'Blog' $result)
  #set ($postsLocation = $NULL)
  #setVariable ("$categoriesLocation" $result)
#end
###**
 * Return the Query for selecting the blog posts based on the context where the posts are displayed.
 * for example there is 4 different panel contexts: 
 * aBlog.aPost or aBlog.WebHome
 * aCategorySpace.aCategory
 * aCategorySpace.WebHome
 * Blog.aPost or Blog.WebHome
 *
 * @param query The query for selecting blog entries.
 * @param queryParams The parameters to bind with the generated query.
 * @param targetDoc The document in which the articles will be displayed.
 *###
#macro(getAllBlogPostsQueryBasedOnDisplayContext $targetDoc $query $queryParams)
  #set ($query = $NULL)
  #set ($queryParams = $NULL)
  #getCategoryAllBlogPostsQuery($resultQuery)
  #set ($resultQueryParams = {})
  #set($sanitizedSpace = $targetDoc.space.replaceAll('([%_!])', '!$1').concat('.%'))
  #if ($targetDoc.space == $defaultBlogSpace &amp;&amp; !$targetDoc.getObject($blogCategoryClassname))
    ## Get all posts that are in the default blog space('Blog') or in category 'Blog.%'
    #set ($discard = $resultQueryParams.put('space', $targetDoc.space))
    #set ($discard = $resultQueryParams.put('catList', $sanitizedSpace))
    #set($resultQuery = "${resultQuery} and (doc.space = :space or catList like :catList escape '!')")
  #elseif($targetDoc.getObject($blogCategoryClassname))
    ## Get all posts that are in a category aCategorySpace.aCategory
    #set ($discard = $resultQueryParams.put('catList', $targetDoc.fullName))
    #set($resultQuery = "${resultQuery} and (catList=:catList)")
  #elseif($targetDoc.getObject('XWiki.DocumentSheetBinding').sheet == 'Blog.CategoriesSheet')
    ## Get all posts that are in a category aCategorySpace.%
    #set ($discard = $resultQueryParams.put('catList', $sanitizedSpace))
    ## Exclude incategorized posts
    #set ($excludedCategory = "${targetDoc.space}.WebHome")
    #if ($targetDoc.space == $defaultBlogSpace)
      #set ($excludedCategory = "Blog.Categories.WebHome")
    #end
    #set ($discard = $resultQueryParams.put('excludedCategory', $excludedCategory))
    #set($resultQuery = "${resultQuery} and (catList&lt;&gt;:excludedCategory) and (catList like :catList escape '!')")
  #else
    ## Get all posts in blog space aBlog
    #getAllBlogPostsQuery($resultQuery)
    #getBlogPostsLocation($targetDoc.space $postsLocation)
    #set ($discard = $resultQueryParams.put('space', $postsLocation))
    #set($resultQuery = "${resultQuery} and doc.space = :space")
  #end
  #setVariable("$query" $resultQuery)
  #setVariable("$queryParams" $resultQueryParams)
#end
##
##
##
###**
 * Display blog posts based on the context where the posts are displayed.
 * for example there is 4 different panel contexts: 
 * aBlog.aPost or aBlog.WebHome
 * aCategorySpace.aCategory
 * aCategorySpace.WebHome
 * Blog.aPost or Blog.WebHome
 *
 * @param targetDoc The document in which the articles will be displayed.
 * @param postsVisiblity The visibility of the posts to display: recent, unpublished, ...
 * @param layout Layout of the the posts to display
 * @param layoutParams additional layout parameters, it is a string like 'param1=val1|...|paramN=valueN'
 * @param limit the number of posts to display
 *###
#macro(displayBlogPostsBasedOnContext $targetDoc $postsVisiblity $layout $layoutParams $limit)
  #if ($postLayout == 'full')
    #set ($macro.paginated = 'yes')
  #end
  #if ($targetDoc.space == $defaultBlogSpace &amp;&amp; !$targetDoc.getObject($blogCategoryClassname))
    ## Display all posts that are in the default blog space('Blog') or in category 'Blog.%'
    #getBlogPostsLayout($xwiki.getDocument("${defaultBlogSpace}.WebHome") $postsLayout)
    #if ("$!layout" == '')
      #set ($layout = $postsLayout)
    #end
    #if ($postsVisiblity == 'recent')
    {{blogpostlist blog="${defaultBlogSpace.replaceAll('~', '~~').replaceAll('"', '~"')}.WebHome" published='yes' hidden='no' layout="$!layout.replaceAll('~', '~~').replaceAll('"', '~"')" layoutParams="$!layoutParams.replaceAll('~', '~~').replaceAll('"', '~"')" limit="$limit" /}}
    #elseif($postsVisiblity == 'unpublished')
    {{blogpostlist blog="${defaultBlogSpace.replaceAll('~', '~~').replaceAll('"', '~"')}.WebHome" published='no' layout="$!layout.replaceAll('~', '~~').replaceAll('"', '~"')" layoutParams="$!layoutParams.replaceAll('~', '~~').replaceAll('"', '~"')" paginated="$!macro.paginated" limit="$limit" /}}
    #end
  #elseif($targetDoc.getObject($blogCategoryClassname))
    ## Display all posts that are in a category aCategorySpace.aCategory
    #getBlogDocumentForCategoriesSpace($targetDoc.space $blogDoc)
    #getBlogPostsLayout($blogDoc $postsLayout)
    #if ("$!layout" == '')
      #set ($layout = $postsLayout)
    #end
    #if ($postsVisiblity == 'recent')
    {{blogpostlist category="$targetDoc.fullName.replaceAll('~', '~~').replaceAll('"', '~"')" published='yes' hidden='no' layout="$!layout.replaceAll('~', '~~').replaceAll('"', '~"')" layoutParams="$!layoutParams.replaceAll('~', '~~').replaceAll('"', '~"')" limit="$limit" /}}
    #elseif($postsVisiblity == 'unpublished')
    {{blogpostlist category="$targetDoc.fullName.replaceAll('~', '~~').replaceAll('"', '~"')" published='no' layout="$!layout.replaceAll('~', '~~').replaceAll('"', '~"')" layoutParams="$!layoutParams.replaceAll('~', '~~').replaceAll('"', '~"')" paginated="$!macro.paginated" limit="$limit" /}}
    #end
  #elseif($targetDoc.getObject('XWiki.DocumentSheetBinding').sheet == 'Blog.CategoriesSheet')
    ## Display all posts that are in a category aCategorySpace.%
    #getBlogDocumentForCategoriesSpace($targetDoc.space $blogDoc)
    #getBlogPostsLayout($blogDoc $postsLayout)
    #if ("$!layout" == '')
      #set ($layout = $postsLayout)
    #end
    #if ($postsVisiblity == 'recent')
    {{blogpostlist category="$targetDoc.space.replaceAll('~', '~~').replaceAll('"', '~"')" published='yes' hidden='no' layout="$!layout.replaceAll('~', '~~').replaceAll('"', '~"')" layoutParams="$!layoutParams.replaceAll('~', '~~').replaceAll('"', '~"')" limit="$limit" /}}
    #elseif($postsVisiblity == 'unpublished')
    {{blogpostlist category="$targetDoc.space.replaceAll('~', '~~').replaceAll('"', '~"')" published='no' layout="$!layout.replaceAll('~', '~~').replaceAll('"', '~"')" layoutParams="$!layoutParams.replaceAll('~', '~~').replaceAll('"', '~"')" paginated="$!macro.paginated" limit="$limit" /}}
    #end
  #else
    ## Display all posts in blog space aBlog
    #getBlogDocument($targetDoc.space $blogDoc)
    #getBlogPostsLayout($blogDoc $postsLayout)
    #if ("$!layout" == '')
      #set ($layout = $postsLayout)
    #end
    #if ($postsVisiblity == 'recent')
    {{blogpostlist blog="$blogDoc.fullName.replaceAll('~', '~~').replaceAll('"', '~"')" published='yes' hidden='no' layout="$!layout.replaceAll('~', '~~').replaceAll('"', '~"')" limit="$limit" /}}
    #elseif($postsVisiblity == 'unpublished')
    {{blogpostlist blog="$blogDoc.fullName.replaceAll('~', '~~').replaceAll('"', '~"')" published='no' layout="$!layout.replaceAll('~', '~~').replaceAll('"', '~"')" layoutParams="$!layoutParams.replaceAll('~', '~~').replaceAll('"', '~"')" paginated="$!macro.paginated" limit="$limit" /}}
    #end
  #end
#end
##
##
##
#**
 * Bind parameters to a query object.
 *
 * @param queryObj The query object (org.xwiki.query.internal.ScriptQuery object)
 * @param queryParams the query parameters.
 *###
#macro(bindQueryParameters $queryObj $queryParams)
  #set ($output = $queryObj)
  #foreach( $key in $queryParams.keySet() )
    #set($output = $queryObj.bindValue($key, $queryParams.get($key)))
  #end
  #setVariable("$queryObj" $output)
#end
##
##
##
#**
 * Determines the blogposts layout: Default layout (Calendar), Image thumbnail
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object with the &lt;tt&gt;postsLayout&lt;/tt&gt;
 *        property set.
 * @param postsLayout The resulting string. If the blog object does not define anything, it is considered full (default).
 *###
#macro(getBlogPostsLayout $blogDoc $postsLayout)
  #getBlogProperty($blogDoc 'postsLayout' 'full' $res)
  #set ($postsLayout = $NULL)
  #setVariable ("$postsLayout" $res)
#end
##
##
##
#**
 * Retrieve the blog document of a categories space, which is the blog descriptor that have its categoriesLocation property set to the categories space
 * 
 * @param categoriesSpace A &lt;tt&gt;String&lt;/tt&gt;, the name of the space.
 * @param blogDoc The resulting XDocument.
 *###
#macro(getBlogDocumentForCategoriesSpace $categoriesSpace $blogDoc)
  #set($macro.blogDocs = $services.query.hql(", BaseObject obj, StringProperty as categoriesLocationProp where obj.name = doc.fullName and obj.className = '$blogClassname' and obj.id=categoriesLocationProp.id.id and categoriesLocationProp.id.name='categoriesLocation' and categoriesLocationProp.value=:categoriesLocation order by doc.creationDate").setLimit(1).setOffset(0).bindValue('categoriesLocation', $categoriesSpace).execute())
  #if($macro.blogDocs.size() &gt; 0 &amp;&amp; $categoriesSpace != $defaultBlogSpace)
    #set($macro.result = $xwiki.getDocument($macro.blogDocs.get(0)))
  #else
    ## Fallback to Blog.WebHome, the default blog
    #set($macro.result = $xwiki.getDocument('Blog.WebHome'))
  #end
  #set ($blogDoc = $NULL)
  #setVariable ("$blogDoc" $macro.result)
#end
{{/velocity}}</content>
</xwikidoc>
